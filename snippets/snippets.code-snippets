{
    "Godot Register types cpp":{
		"prefix": "gdregistertypescpp",
		"body": [
			"#include \"register_types.h\"",
			"",
			"#include <gdextension_interface.h>",
			"",		
			"#include <godot_cpp/core/class_db.hpp>",
			"#include <godot_cpp/core/defs.hpp>",
			"#include <godot_cpp/godot.hpp>",
			"",
			"using namespace godot;",
			"",
			"void initialize_example_module(ModuleInitializationLevel p_level) {",
			"\tif (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) return;",
			"}",
			"",
			"void uninitialize_example_module(ModuleInitializationLevel p_level) {",
			"\tif (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) return;",
			"}",
			"",
			"extern \"C\" {",
			"GDExtensionBool GDE_EXPORT example_library_init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {",
			"\tgodot::GDExtensionBinding::InitObject init_obj(p_get_proc_address, p_library, r_initialization);",
			"",
			"\tinit_obj.register_initializer(initialize_example_module);",
			"\tinit_obj.register_terminator(uninitialize_example_module);",
			"\tinit_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);",
			"",
			"\treturn init_obj.init();",
			"}",
			"}"
		]
	},
	"Godot register types h":{
		"prefix": "gdregistertypesh",
		"body": [
			"#ifndef EXAMPLE_REGISTER_TYPES_H",
			"#define EXAMPLE_REGISTER_TYPES_H",
			"",
			"#include <godot_cpp/core/class_db.hpp>",
			"",
			"using namespace godot;",
			"",
			"void initialize_example_module(ModuleInitializationLevel p_level);",
			"void uninitialize_example_module(ModuleInitializationLevel p_level);",
			"",
			"#endif"
		]
	},
	"Godot setup Class": {
		"prefix": "gdclass",
		"body": [
			"class $1 : public $2 {",
			"\tGDCLASS($1,$2);",
			"",
			"\tprivate:",
			"\t$0",
			"\tprotected:",
			"\tstatic void _bind_methods();",
			"\tpublic:",
			"",
			"};"
		],
		"description": "setup GDClass"
	},
	"Godot bind variable":{
		"prefix": "gdbindvar",
		"body": [
			"ClassDB::bind_method(D_METHOD(\"get_$2\"), &$1::get_$2);",
			"ClassDB::bind_method(D_METHOD(\"set_$2\",\"value\"), &$1::set_$2);",
			"ADD_PROPERTY(PropertyInfo(Variant::$3, \"$2\"), \"set_$2\", \"get_$2\");"
		],
		"description": "Bind a godot property"
	},
	"Godot Standard Setget":{
		"prefix": "gdsetget",
		"body": [
			"$1 $2::get_$3() {",
			"\treturn $3;",
			"}",
			"",
			"void $2::set_$3($1 value) {",
			"\t$3 = value;",
			"}"
		],
		"description": "Creates standard setters and getters"
	},
	"Godot header setget":{
		"prefix": "gdhsg",
		"body": [
			"$2 get_$1();",
			"void set_$1($2 value);"
		],
		"description": "create setget headers"	
	},
	"Godot bind method":{
		"prefix": "gdbm",
		"body": [
			"ClassDB::bind_method(D_METHOD(\"$2\"$0),&$1::$2);"
		],
		"description": "Create a method binder"
	},
	"EnterTree Function":{
		"prefix": "EnterTree",
		"body": "virtual void _enter_tree() override;"
	},
	"ExitTree Function":{
		"prefix": "ExitTree",
		"body": "virtual void _exit_tree() override;"
	},
	"Ready Function":{
		"prefix": "Ready",
		"body": "virtual void _ready() override;"
	},
	"Input Function":{
		"prefix": "Input",
		"body": "virtual void _input(const Ref<InputEvent> &event) override;"
	},
	"Process Function":{
		"prefix": "Process",
		"body": "virtual void _process(double p_delta) override;"
	},
	"PhysicsProcess Function":{
		"prefix": "Physics",
		"body": "virtual void _physics_process(double p_delta) override;"
	}
}