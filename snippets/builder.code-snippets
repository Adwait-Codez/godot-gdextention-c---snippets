{
    "Build Normal":{
        "prefix": "GodotBldNormal",
        "body": ["#!/usr/bin/env python",
"import os",
"import sys",
"import SCons",
"",
"env = SConscript('godot-cpp/SConstruct')",
"",
"outputfolder = \"project/bin\"",
"",
"# For the reference:",
"# - CCFLAGS are compilation flags shared between C and C++",
"# - CFLAGS are for C-specific compilation flags",
"# - CXXFLAGS are for C++-specific compilation flags",
"# - CPPFLAGS are for pre-processor flags",
"# - CPPDEFINES are for pre-processor defines",
"# - LINKFLAGS are for linking flags",
"",
"# tweak this if you want to use different folders, or more folders, to store your source code in.",
"env.Append(CPPPATH=[\"src\"])",
"sources = Glob(\"src/*.cpp\")",
"",
"if env[\"platform\"] == \"macos\":",
    "\tlibrary = env.SharedLibrary(",
        "\t\t\"{}/libgdexample.{}.{}.framework/libgdexample.{}.{}\".format(",
            "\t\toutputfolder, env[\"platform\"], env[\"target\"], env[\"platform\"], env[\"target\"]",
        "\t),",
        "\tsource=sources,",
    "\t)",
"elif env[\"platform\"] == \"ios\":",
    "\tif env[\"ios_simulator\"]:",
        "\t\tlibrary = env.StaticLibrary(",
            "\t\t\"{}/libgdexample.{}.{}.simulator.a\".format(outputfolder, env[\"platform\"], env[\"target\"]),",
            "\t\tsource=sources,",
        "\t)",
    "\telse:",
        "\t\tlibrary = env.StaticLibrary(",
            "\t\t\"{}/libgdexample.{}.{}.a\".format(outputfolder, env[\"platform\"], env[\"target\"]),",
            "\t\tsource=sources,",
        "\t)",
"else:",
    "\tlibrary = env.SharedLibrary(",
        "\t\t\"{}/libgdexample{}{}\".format(outputfolder, env[\"suffix\"], env[\"SHLIBSUFFIX\"]),",
        "\t\tsource=sources,",
    "\t)",
    "",
"import json",
"",
"def det(dat):",
    "\tif type(dat) is SCons.Node.FS.Dir:",
        "\t\treturn dat.abspath",
    "\treturn dat",
"",
"def generate_cpp_properties(target, source, env):",
    "\t# Define the content of cpp_properties.json",
    "\tcpp_properties = {",
        "\t\t\"configurations\": [",
            "\t\t\t{",
                "\t\t\t\"name\": \"Win32\",",
                "\t\t\t\"includePath\": [det(path) for path in env['CPPPATH']],",
                "\t\t\t\"defines\":[det(define) for define in env['CPPDEFINES']],  # Preprocessor definitions",
                "\t\t\t\"compilerPath\": env['CXX'],   # Compiler path",
                "\t\t\t\"cStandard\": \"c17\",",
                "\t\t\t\"cppStandard\": \"c++17\"",
            "\t\t\t}",
        "\t\t],",
        "\t\t\"version\": 4",
    "\t}",
    "\t# Write the JSON file",
    "\twith open(str(target[0]), 'w') as f:",
        "\t\tjson.dump(cpp_properties, f, indent=4)",
"",
"# Command to generate cpp_properties.json",
"gencpp = env.Command('.vscode/c_cpp_properties.json', [], generate_cpp_properties)",
"",
"env.Alias('gencpp', gencpp)",
    "Default(library)" ]
    }
}
